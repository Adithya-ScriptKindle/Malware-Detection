# -*- coding: utf-8 -*-
"""Malware Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LNkXKBEOdXOGMPWU3-8BLEeHhLTV8I67
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns


data=pd.read_csv('/content/drive/My Drive/data.csv',sep='|', low_memory=False)
testdata=pd.read_csv('/content/drive/My Drive/test_data.csv',sep=',', low_memory=False)
#print(data.head(10))
#print(testdata.head(10))
print(testdata.shape)
data_types_dict = {'ImageBase': float,'Machine': str}
data= data.astype(data_types_dict)
#print(data.info())
#print(testdata.info())

X = data.drop(['Name','md5','legitimate','Machine'],axis=1).values
y = data['legitimate'].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y ,test_size=0.2)

from sklearn.tree import DecisionTreeClassifier
DTC= DecisionTreeClassifier(random_state = 0)
DTC.fit(X_train,y_train)
y_p2=DTC.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p2)
print("Accuracy using Decision Tree Classifier: %f"%acc)

from sklearn.ensemble import RandomForestClassifier
RFC= RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
RFC.fit(X_train,y_train)
y_p3=RFC.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p3)
print("Accuracy using Random Forest Classifier: %f"%acc)

from sklearn.neighbors import KNeighborsClassifier
KNN1= KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
KNN1.fit(X_train,y_train)
y_p4=KNN1.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p4)
print("Accuracy using KNeighbors Classifiers: %f"%acc)

from sklearn.naive_bayes import GaussianNB
GNB= GaussianNB()
GNB.fit(X_train,y_train)
y_p5=GNB.predict(X_test)
from sklearn.metrics import accuracy_score
acc = accuracy_score(y_test, y_p5)
print("Accuracy using GaussianNB Classifiers: %f"%acc)

from sklearn.metrics import confusion_matrix

cm2 = confusion_matrix(y_test, y_p2)
cm3 = confusion_matrix(y_test, y_p3)
cm4 = confusion_matrix(y_test, y_p4)
cm5 = confusion_matrix(y_test, y_p5)


print("Confusion Matrix Of Decision Tree Classifier")
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm2:
  print(*line)

print("Confusion Matrix Of Random Forest Classifier")
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm3:
  print(*line)

print("Confusion Matrix Of KNeighbors Classifiers")
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm4:
  print(*line)

print("Confusion Matrix Of GaussianNB Classifier")
labels =['Pr 0', 'Pr 1']
print(*labels)
for line in cm5:
  print(*line)

data_types_dict = {'SectionsMinVirtualsize': int,'ResourcesMinSize':int}
testdata = testdata.astype(data_types_dict)

testdata=testdata.dropna(axis=1)

dic = {}
dic['Id'] = testdata['ID']
test= testdata.drop(['Machine','ID'], axis = 1).values
y_pred = RFC.predict(test)
print(y_pred.shape)

dic['Prediction'] = y_pred

df = pd.DataFrame(dic)
df.set_index("Id",inplace = True)
print(df.head(100))
df.to_csv('submission2.csv')

"""# New Section"""